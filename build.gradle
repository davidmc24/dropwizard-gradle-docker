import org.gradle.api.plugins.docker.tasks.container.*
import org.gradle.api.plugins.docker.tasks.image.*

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.jfrog.org/artifactory/gradle-plugins'
        }
    }
    dependencies {
        classpath("com.kpelykh:docker-java:0.8.1")
        classpath("net.saliman:gradle-cobertura-plugin:1.1.0")
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.9.0-M2'
        classpath 'org.gradle.api.plugins:gradle-docker-plugin:0.1'
    }
}

apply plugin: 'cobertura'
apply plugin: 'codenarc'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'docker'
apply plugin: 'application'

group 'org.kyleboon'
version = "$currentVersion"

repositories {
    jcenter()
    maven {
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
    
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile "io.dropwizard:dropwizard-core:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-hibernate:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-migrations:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-auth:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-client:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-assets:$dropwizardVersion"

    compile 'com.h2database:h2:1.3.170'

    testCompile "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
    testCompile 'org.slf4j:log4j-over-slf4j:1.7.2'

    testRuntime 'cglib:cglib-nodep:2.2.2'
    testRuntime 'org.objenesis:objenesis:1.2'
}

configurations {
    all*.exclude group: 'log4j', module: 'log4j'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'groovy') {
            details.useTarget group: details.requested.group, name: 'groovy-all', version: groovyVersion
        }
        if (details.requested.name == 'groovy-all') {
            details.useVersion groovyVersion
        }
        if (details.requested.name == 'spock-core') {
            details.useVersion spockVersion
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.kyleboon.contact.ContactsService'
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'BUILD_NUMBER': System.env.BUILD_NUMBER ?: 'LOCAL'
        attributes 'BUILD_URL': System.env.BUILD_URL ?: 'LOCAL'
        attributes 'GIT_COMMIT': System.env.GIT_COMMIT ?: 'LOCAL'
        attributes 'GIT_BRANCH': System.env.GIT_BRANCH ?: 'LOCAL'
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
    }
}

cobertura {
    coverageFormats = ['xml', 'html']
    coverageIncludes = ['**/*.java', '**/*.groovy']
    coverageSourceDirs = [sourceSets.main.allSource.srcDirs]
}

codenarc {
    configFile = rootProject.file('codenarcrule.groovy')
    reportFormat = System.properties['codeNarcOutput'] ?: 'html'
}

mainClassName = 'com.kyleboon.contact.ContactsService'

shadowJar {
    mergeServiceFiles()
}

run {
    args 'server', "src/main/resources/todo.yml"
}

runShadow {
    args 'server', "src/main/resources/todo.yml"
}

task buildScriptReport(type: DependencyReportTask) {
    configurations = [project.buildscript.configurations.classpath]
}


/**
 *  Docker configuration
 */

docker {
    serverUrl = 'http://localhost:2375'
}

ext.imageTag = 'test/contact'

task buildMyAppImage(type: DockerBuildImage) {
    inputDir =  projectDir
    tag = imageTag
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildMyAppImage
    imageId = imageTag
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startMyAppContainer
    finalizedBy stopMyAppContainer
}